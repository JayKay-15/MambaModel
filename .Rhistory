home_opp_ast:home_pace) %>%
mutate(team_winner = if_else(team_winner == "win", 1, 0))
# near zero variables
nearZeroVar(model_win_all, saveMetrics = T)
# filter highly correlated features
model_win <- model_win_all %>% select(-all_of(cor_cols))
# correlations - all variables
cor_mx <- cor(model_win_all, model_win_all$team_winner)
cor_mx <- as.matrix(cor_mx[order(abs(cor_mx[,1]), decreasing = T),])
cor_mx
# correlations - filtered variables
cor_mx <- cor(model_win_cor, model_win_cor$team_winner)
# correlations - filtered variables
cor_mx <- cor(model_win, model_win$team_winner)
cor_mx <- as.matrix(cor_mx[order(abs(cor_mx[,1]), decreasing = T),])
cor_mx
# correlations - team score
model_ts_all <- nba_final %>%
select(team_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
# near zero variables
nearZeroVar(model_ts_all, saveMetrics = T)
# filter highly correlated features
model_ts <- model_ts_all %>% select(-all_of(cor_cols))
# correlations - all variables
cor_mx <- cor(model_ts_all, model_ts_all$team_score)
cor_mx <- as.matrix(cor_mx[order(abs(cor_mx[,1]), decreasing = T),])
cor_mx
# correlations - filtered variables
cor_mx <- cor(model_ts, model_ts$team_score)
cor_mx <- as.matrix(cor_mx[order(abs(cor_mx[,1]), decreasing = T),])
cor_mx
# correlations - opp score
model_os_all <- nba_final %>%
select(opp_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
# near zero variables
nearZeroVar(model_os_all, saveMetrics = T)
# filter highly correlated features
model_os <- model_os_all %>% select(-all_of(cor_cols))
# correlations - all variables
cor_mx <- cor(model_os_all, model_os_all$opp_score)
cor_mx <- as.matrix(cor_mx[order(abs(cor_mx[,1]), decreasing = T),])
cor_mx
# correlations - filtered variables
cor_mx <- cor(model_os, model_os$opp_score)
cor_mx <- as.matrix(cor_mx[order(abs(cor_mx[,1]), decreasing = T),])
cor_mx
# all features
train <- nba_final %>%
filter(season <= 2021) %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
test <- nba_final %>%
filter(season > 2021) %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
# highly correlated features removed
train <- train %>% select(-all_of(cor_cols))
test <- test %>% select(-all_of(cor_cols))
# normalize features
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
# model
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T,
classProbs = T, summaryFunction = twoClassSummary)
grid <- expand.grid(
alpha = 0, # ridge = 0 / lasso = 1
lambda = 10^seq(2, -3, by = -.1)
)
reg_win <- train(as.factor(result) ~., data = train,
method = "glmnet",
metric = "ROC",
trControl = ctrl,
tuneGrid = grid)
# model
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T,
classProbs = T, summaryFunction = twoClassSummary)
grid <- expand.grid(
alpha = 0, # ridge = 0 / lasso = 1
lambda = 10^seq(2, -3, by = -.1)
)
reg_win <- train(team_winner ~., data = train,
method = "glmnet",
metric = "ROC",
trControl = ctrl,
tuneGrid = grid)
reg_win
reg_win$resample
reg_win$results
summary(reg_win) # model components
confusionMatrix(reg_win) # confusion matrix
glance(reg_win$finalModel) # entire model - tidymodels
tidy(reg_win$finalModel) # model components - tidymodels
augment(reg_win$finalModel) # observations - tidymodels
# predictions
win_pred <- predict(reg_win, test, type = "prob")
confusionMatrix(test$team_winner,
factor(ifelse(win_pred[,1] > 0.5, "win", "loss"),
levels = c("win","loss")),
positive = "win")
away_pred <- as.numeric(win_pred[,1])
home_pred <- as.numeric(win_pred[,2])
obs <- test$team_winner
pred <- factor(ifelse(away_pred > 0.5, "win", "loss"), levels = c("win","loss"))
obs_pred <- data.frame(obs = obs,
pred = pred,
win = away_pred,
loss = home_pred)
# model evaluation
twoClassSummary(obs_pred, lev = levels(obs)) # roc
prSummary(obs_pred, lev = levels(obs)) # auc
mnLogLoss(obs_pred, lev = levels(obs)) # log loss
eval <- MLeval::evalm(data.frame(win_pred, test$team_winner)) # roc chart
roc_score <- pROC::roc(test$team_winner, away_pred, plot = T, legacy.axes = T,
percent = T,
xlab="False Positive Percentage",
ylab="True Postive Percentage",
col="#377eb8", lwd = 4, print.auc = T) # roc chart
postResample(pred = pred, obs = obs) # caret eval
obs_pred %>% metrics(obs, pred) # accuracy and kappa
obs_pred %>% roc_auc(obs, win) # auc
# feature importance
importance <- varImp(log_win, scale = F)
print(importance)
# feature importance
importance <- varImp(reg_win, scale = F)
print(importance)
plot(importance)
log_win_imp <- rownames_to_column(importance[["importance"]], "Var") %>%
arrange(desc(Overall)) %>%
head(20)
log_win_imp
# all features
train <- nba_final %>%
filter(season <= 2021) %>%
select(team_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
test <- nba_final %>%
filter(season > 2021) %>%
select(team_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
# highly correlated features removed
train <- train %>% select(-all_of(cor_cols))
test <- test %>% select(-all_of(cor_cols))
# normalize features
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
# model
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T)
grid <- expand.grid(
alpha = 0,
lambda = 10^seq(2, -3, by = -.1)
)
reg_team <- train(team_score ~., data = train,
method = "glmnet",
trControl = ctrl,
tuneGrid = grid)
# all features
train <- nba_final %>%
filter(season <= 2021) %>%
select(team_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
test <- nba_final %>%
filter(season > 2021) %>%
select(team_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
# highly correlated features removed
train <- train %>% select(-all_of(cor_cols))
test <- test %>% select(-all_of(cor_cols))
# normalize features
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
# model
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T)
grid <- expand.grid(
alpha = 0,
lambda = 10^seq(2, -3, by = -.1)
)
reg_team <- train(team_score ~., data = train,
method = "glmnet",
trControl = ctrl,
tuneGrid = grid)
reg_team
summary(reg_team) # model components
autoplot(reg_team$finalModel) # viz - ggfortify
glance(reg_team$finalModel) # entire model - tidymodels
tidy(reg_team$finalModel) # model components - tidymodels
augment(reg_team$finalModel) # observations - tidymodels
# predictions
team_pred <- predict(reg_team, test)
# model evaluation
postResample(pred = team_pred, obs = test$team_score) # caret eval
rmse <- RMSE(team_pred, test$team_score)
mae <- MAE(team_pred, test$team_score)
r2 <- R2(team_pred, test$team_score)
cat("RMSE: ", rmse, "MAE: ", mae, " R2: ", r2)
# variable importance
importance <- varImp(reg_team, scale = F)
print(importance)
plot(importance)
reg_team_imp <- rownames_to_column(importance[["importance"]], "Var") %>%
arrange(desc(Overall)) %>%
head(20)
reg_team_imp
# all features
train <- nba_final %>%
filter(season <= 2021) %>%
select(team_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
test <- nba_final %>%
filter(season > 2021) %>%
select(team_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
# highly correlated features removed
train <- train %>% select(-all_of(cor_cols))
test <- test %>% select(-all_of(cor_cols))
# normalize features
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
# model
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T)
grid <- expand.grid(
alpha = 0,
lambda = 10^seq(2, -3, by = -.1)
)
reg_team <- train(team_score ~., data = train,
method = "glmnet",
trControl = ctrl,
tuneGrid = grid)
reg_team
summary(reg_team) # model components
autoplot(reg_team$finalModel) # viz - ggfortify
glance(reg_team$finalModel) # entire model - tidymodels
tidy(reg_team$finalModel) # model components - tidymodels
# predictions
team_pred <- predict(reg_team, test)
# model evaluation
postResample(pred = team_pred, obs = test$team_score) # caret eval
# variable importance
importance <- varImp(reg_team, scale = F)
plot(importance)
# all features
train <- nba_final %>%
filter(season <= 2021) %>%
select(opp_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
test <- nba_final %>%
filter(season > 2021) %>%
select(opp_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
# highly correlated features removed
train <- train %>% select(-all_of(cor_cols))
test <- test %>% select(-all_of(cor_cols))
# normalize features
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
# model
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T)
grid <- expand.grid(
alpha = 0,
lambda = 10^seq(2, -3, by = -.1)
)
# normalize features
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
# model
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T)
grid <- expand.grid(
alpha = 0,
lambda = 10^seq(2, -3, by = -.1)
)
reg_opp <- train(opp_score ~., data = train,
method = "glmnet",
trControl = ctrl,
tuneGrid = grid)
reg_opp
summary(reg_opp) # model components
autoplot(reg_opp$finalModel) # viz - ggfortify
glance(reg_opp$finalModel) # entire model - tidymodels
tidy(reg_opp$finalModel) # model components - tidymodels
# predictions
opp_pred <- predict(reg_opp, test)
# model evaluation
postResample(pred = opp_pred, obs = test$opp_score) # caret eval
rmse <- RMSE(opp_pred, test$opp_score)
mae <- MAE(opp_pred, test$opp_score)
r2 <- R2(opp_pred, test$opp_score)
cat("RMSE: ", rmse, "MAE: ", mae, " R2: ", r2)
# variable importance
importance <- varImp(lin_opp, scale = F)
print(importance)
# all features
train <- nba_final %>%
filter(season <= 2021) %>%
select(opp_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
test <- nba_final %>%
filter(season > 2021) %>%
select(opp_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
# highly correlated features removed
train <- train %>% select(-all_of(cor_cols))
test <- test %>% select(-all_of(cor_cols))
# normalize features
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
# model
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T)
grid <- expand.grid(
alpha = 0,
lambda = 10^seq(2, -3, by = -.1)
)
reg_opp <- train(opp_score ~., data = train,
method = "glmnet",
trControl = ctrl,
tuneGrid = grid)
reg_opp
summary(reg_opp) # model components
autoplot(reg_opp$finalModel) # viz - ggfortify
glance(reg_opp$finalModel) # entire model - tidymodels
tidy(reg_opp$finalModel) # model components - tidymodels
# predictions
opp_pred <- predict(reg_opp, test)
# model evaluation
postResample(pred = opp_pred, obs = test$opp_score) # caret eval
# variable importance
importance <- varImp(lin_opp, scale = F)
# variable importance
importance <- varImp(lin_opp, scale = F)
plot(importance)
reg_opp_imp <- rownames_to_column(importance[["importance"]], "Var") %>%
arrange(desc(Overall)) %>%
head(20)
reg_opp_imp
library(glmnet) # regularization
# all features
train <- nba_final %>%
filter(season <= 2021) %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
test <- nba_final %>%
filter(season > 2021) %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
# highly correlated features removed
train <- train %>% select(-all_of(cor_cols))
test <- test %>% select(-all_of(cor_cols))
# normalize features
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
# model
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T,
classProbs = T, summaryFunction = twoClassSummary)
grid <- expand.grid(
alpha = 0, # ridge = 0 / lasso = 1
lambda = 10^seq(2, -3, by = -.1)
)
reg_win <- train(team_winner ~., data = train,
method = "glmnet",
metric = "ROC",
trControl = ctrl,
tuneGrid = grid)
reg_win
reg_win$resample
reg_win$results
summary(reg_win) # model components
confusionMatrix(reg_win) # confusion matrix
glance(reg_win$finalModel) # entire model - tidymodels
tidy(reg_win$finalModel) # model components - tidymodels
# predictions
win_pred <- predict(reg_win, test, type = "prob")
confusionMatrix(test$team_winner,
factor(ifelse(win_pred[,1] > 0.5, "win", "loss"),
levels = c("win","loss")),
positive = "win")
