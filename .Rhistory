confusionMatrix(test$team_winner,
factor(ifelse(win_pred[,1] > 0.5, "win", "loss"),
levels = c("win","loss")),
positive = "win")
col_rm <- findCorrelation(base_cor, cutoff = .9, exact = F, names = T)
set.seed(214)
train <- nba_final %>%
filter(season <= 2021) %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
test <- nba_final %>%
filter(season > 2021) %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
train <- train %>% select(-col_rm)
test <- test %>% select(-col_rm)
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T,
classProbs = T, summaryFunction = twoClassSummary)
log_win <- train(team_winner ~., data = train,
trControl = ctrl,
method = "glm",
metric = "ROC",
family = "binomial")
log_win
log_win$resample
log_win$results
summary(log_win) # Model Components
confusionMatrix(log_win) # Confusion Matrix
glance(log_win$finalModel) # Entire Model - tidymodels
tidy(log_win$finalModel) # Model Components - tidymodels
augment(log_win$finalModel) # Observations - tidymodels
win_pred <- predict(log_win, test, type = "prob")
confusionMatrix(test$team_winner,
factor(ifelse(win_pred[,1] > 0.5, "win", "loss"),
levels = c("win","loss")),
positive = "win")
col_rm <- findCorrelation(base_cor, cutoff = .8, exact = F, names = T)
set.seed(214)
train <- nba_final %>%
filter(season <= 2021) %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
test <- nba_final %>%
filter(season > 2021) %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
train <- train %>% select(-col_rm)
test <- test %>% select(-col_rm)
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T,
classProbs = T, summaryFunction = twoClassSummary)
log_win <- train(team_winner ~., data = train,
trControl = ctrl,
method = "glm",
metric = "ROC",
family = "binomial")
log_win
log_win$resample
log_win$results
summary(log_win) # Model Components
confusionMatrix(log_win) # Confusion Matrix
glance(log_win$finalModel) # Entire Model - tidymodels
tidy(log_win$finalModel) # Model Components - tidymodels
augment(log_win$finalModel) # Observations - tidymodels
win_pred <- predict(log_win, test, type = "prob")
confusionMatrix(test$team_winner,
factor(ifelse(win_pred[,1] > 0.5, "win", "loss"),
levels = c("win","loss")),
positive = "win")
col_rm <- findCorrelation(base_cor, cutoff = .7, exact = F, names = T)
set.seed(214)
train <- nba_final %>%
filter(season <= 2021) %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
test <- nba_final %>%
filter(season > 2021) %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
train <- train %>% select(-col_rm)
test <- test %>% select(-col_rm)
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T,
classProbs = T, summaryFunction = twoClassSummary)
log_win <- train(team_winner ~., data = train,
trControl = ctrl,
method = "glm",
metric = "ROC",
family = "binomial")
log_win
log_win$resample
log_win$results
summary(log_win) # Model Components
confusionMatrix(log_win) # Confusion Matrix
glance(log_win$finalModel) # Entire Model - tidymodels
tidy(log_win$finalModel) # Model Components - tidymodels
augment(log_win$finalModel) # Observations - tidymodels
win_pred <- predict(log_win, test, type = "prob")
confusionMatrix(test$team_winner,
factor(ifelse(win_pred[,1] > 0.5, "win", "loss"),
levels = c("win","loss")),
positive = "win")
col_rm <- findCorrelation(base_cor, cutoff = .5, exact = F, names = T)
set.seed(214)
train <- nba_final %>%
filter(season <= 2021) %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
test <- nba_final %>%
filter(season > 2021) %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
train <- train %>% select(-col_rm)
test <- test %>% select(-col_rm)
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T,
classProbs = T, summaryFunction = twoClassSummary)
log_win <- train(team_winner ~., data = train,
trControl = ctrl,
method = "glm",
metric = "ROC",
family = "binomial")
log_win
log_win$resample
log_win$results
summary(log_win) # Model Components
confusionMatrix(log_win) # Confusion Matrix
glance(log_win$finalModel) # Entire Model - tidymodels
tidy(log_win$finalModel) # Model Components - tidymodels
augment(log_win$finalModel) # Observations - tidymodels
win_pred <- predict(log_win, test, type = "prob")
confusionMatrix(test$team_winner,
factor(ifelse(win_pred[,1] > 0.5, "win", "loss"),
levels = c("win","loss")),
positive = "win")
View(test)
# correlations - win
cor_win_df <- nba_final %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace) %>%
mutate(team_winner = if_else(team_winner == "win", 1, 0))
cor_win <- cor(cor_win_df, cor_win_df$team_winner)
cor_win <- as.matrix(cor_win[order(abs(cor_win[,1]), decreasing = T),])
cor_win
cor_win
cor_win[[20]]
cor_win[20]
cor_win[,20]
cor_win[20,]
rownames(cor_win)
rownames(cor_win)[1:40]
set.seed(214)
train <- nba_final %>%
filter(season <= 2021) %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
test <- nba_final %>%
filter(season > 2021) %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
train <- train %>% select(rownames(cor_win)[1:41])
test <- test %>% select(rownames(cor_win)[1:41])
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T,
classProbs = T, summaryFunction = twoClassSummary)
log_win <- train(team_winner ~., data = train,
trControl = ctrl,
method = "glm",
metric = "ROC",
family = "binomial")
log_win
log_win$resample
log_win$results
summary(log_win) # Model Components
confusionMatrix(log_win) # Confusion Matrix
glance(log_win$finalModel) # Entire Model - tidymodels
tidy(log_win$finalModel) # Model Components - tidymodels
augment(log_win$finalModel) # Observations - tidymodels
win_pred <- predict(log_win, test, type = "prob")
confusionMatrix(test$team_winner,
factor(ifelse(win_pred[,1] > 0.5, "win", "loss"),
levels = c("win","loss")),
positive = "win")
set.seed(214)
train <- nba_final %>%
filter(season <= 2021) %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
test <- nba_final %>%
filter(season > 2021) %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
train <- train %>% select(rownames(cor_win)[1:51])
test <- test %>% select(rownames(cor_win)[1:51])
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T,
classProbs = T, summaryFunction = twoClassSummary)
log_win <- train(team_winner ~., data = train,
trControl = ctrl,
method = "glm",
metric = "ROC",
family = "binomial")
log_win
log_win$resample
log_win$results
summary(log_win) # Model Components
confusionMatrix(log_win) # Confusion Matrix
glance(log_win$finalModel) # Entire Model - tidymodels
tidy(log_win$finalModel) # Model Components - tidymodels
augment(log_win$finalModel) # Observations - tidymodels
win_pred <- predict(log_win, test, type = "prob")
confusionMatrix(test$team_winner,
factor(ifelse(win_pred[,1] > 0.5, "win", "loss"),
levels = c("win","loss")),
positive = "win")
nba_final_win <- nba_final %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
nearZeroVar(nba_final_win, saveMetrics = T)
base_cor <-  cor(nba_final_win[, 2:ncol(nba_final_win)])
extreme_cor <- sum(abs(base_cor[upper.tri(base_cor)]) > .999)
extreme_cor
col_rm <- findCorrelation(base_cor, cutoff = .5, exact = F, names = T)
nba_final_win_filtered <- nba_final_win %>% select(-col_rm)
new_cor <- cor(nba_model_df_filtered[, 2:ncol(nba_model_df_filtered)])
findCorrelation(new_cor, cutoff = .5)
summary(new_cor[upper.tri(new_cor)])
nba_final_win <- nba_final %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
nearZeroVar(nba_final_win, saveMetrics = T)
base_cor <-  cor(nba_final_win[, 2:ncol(nba_final_win)])
extreme_cor <- sum(abs(base_cor[upper.tri(base_cor)]) > .999)
extreme_cor
col_rm <- findCorrelation(base_cor, cutoff = .5, exact = F, names = T)
set.seed(214)
train <- nba_final %>%
filter(season <= 2021) %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
test <- nba_final %>%
filter(season > 2021) %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
train <- train %>% select(-col_rm)
test <- test %>% select(-col_rm)
train <- train %>% select(rownames(cor_win)[1:51])
test <- test %>% select(rownames(cor_win)[1:51])
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T,
classProbs = T, summaryFunction = twoClassSummary)
log_win <- train(team_winner ~., data = train,
trControl = ctrl,
method = "glm",
metric = "ROC",
family = "binomial")
log_win
log_win$resample
log_win$results
summary(log_win) # Model Components
confusionMatrix(log_win) # Confusion Matrix
glance(log_win$finalModel) # Entire Model - tidymodels
tidy(log_win$finalModel) # Model Components - tidymodels
augment(log_win$finalModel) # Observations - tidymodels
win_pred <- predict(log_win, test, type = "prob")
confusionMatrix(test$team_winner,
factor(ifelse(win_pred[,1] > 0.5, "win", "loss"),
levels = c("win","loss")),
positive = "win")
col_rm <- findCorrelation(base_cor, cutoff = .5, exact = F, names = T)
nba_final_win_filtered <- nba_final_win %>% select(-col_rm)
new_cor <- cor(nba_model_df_filtered[, 2:ncol(nba_model_df_filtered)])
findCorrelation(new_cor, cutoff = .5)
summary(new_cor[upper.tri(new_cor)])
View(nba_final_win_filtered)
col_rm <- findCorrelation(base_cor, cutoff = .5, exact = F, names = T)
nba_final_win_filtered <- nba_final_win %>% select(-col_rm)
new_cor <- cor(nba_final_win_filtered[, 2:ncol(nba_final_win_filtered)])
findCorrelation(new_cor, cutoff = .5)
summary(new_cor[upper.tri(new_cor)])
set.seed(214)
train <- nba_final %>%
filter(season <= 2021) %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
test <- nba_final %>%
filter(season > 2021) %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
train <- train %>% select(-col_rm)
test <- test %>% select(-col_rm)
train <- train %>% select(rownames(cor_win)[1:51])
test <- test %>% select(rownames(cor_win)[1:51])
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
set.seed(214)
train <- nba_final %>%
filter(season <= 2021) %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
test <- nba_final %>%
filter(season > 2021) %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
train <- train %>% select(-col_rm)
test <- test %>% select(-col_rm)
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T,
classProbs = T, summaryFunction = twoClassSummary)
log_win <- train(team_winner ~., data = train,
trControl = ctrl,
method = "glm",
metric = "ROC",
family = "binomial")
log_win
log_win$resample
log_win$results
summary(log_win) # Model Components
confusionMatrix(log_win) # Confusion Matrix
glance(log_win$finalModel) # Entire Model - tidymodels
tidy(log_win$finalModel) # Model Components - tidymodels
augment(log_win$finalModel) # Observations - tidymodels
win_pred <- predict(log_win, test, type = "prob")
confusionMatrix(test$team_winner,
factor(ifelse(win_pred[,1] > 0.5, "win", "loss"),
levels = c("win","loss")),
positive = "win")
