filter(season <= 2021) %>%
select(team_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
test <- nba_final %>%
filter(season > 2021) %>%
select(team_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
# highly correlated features removed
train <- train %>% select(-all_of(cor_cols))
test <- test %>% select(-all_of(cor_cols))
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T)
lin_as <- train(team_score ~., data = train,
trControl = ctrl,
method = "lm")
lin_as
summary(lin_as) # Model Components
autoplot(lin_as$finalModel) # Viz
ggfortify::autoplot(lin_as$finalModel) # Viz
# library(MLeval) # model eval
# library(pROC) # model eval
library(ggfortify) # autoplot
autoplot(lin_as$finalModel) # Viz
glance(lin_as$finalModel) # Entire Model
tidy(lin_as$finalModel) # Model Components
augment(lin_as$finalModel) # Observations
plot(lin_as$finalModel) # Viz
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T)
lin_ts <- train(team_score ~., data = train,
trControl = ctrl,
method = "lm")
lin_ts
summary(lin_ts) # Model Components
autoplot(lin_ts$finalModel) # Viz
glance(lin_ts$finalModel) # Entire Model
tidy(lin_ts$finalModel) # Model Components
augment(lin_ts$finalModel) # Observations
away_pred <- predict(lin_ts, test)
42.5/3
away_pred <- predict(lin_ts, test)
rmse <- RMSE(away_pred, test$team_score)
mae <- MAE(away_pred, test$team_score)
r2 <- R2(away_pred, test$team_score)
cat("RMSE: ", rmse, "MAE: ", mae, " R2: ", r2)
lin_as_imp <- rownames_to_column(varImp(lin_ts)[["importance"]], "Var") %>%
arrange(desc(Overall)) %>%
head()
View(lin_as_imp)
lin_as_imp <- rownames_to_column(varImp(lin_ts)[["importance"]], "Var") %>%
arrange(desc(Overall)) %>%
head(20)
View(lin_as_imp)
team_pred <- predict(lin_team, test)
# all features
train <- nba_final %>%
filter(season <= 2021) %>%
select(team_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
test <- nba_final %>%
filter(season > 2021) %>%
select(team_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
# highly correlated features removed
train <- train %>% select(-all_of(cor_cols))
test <- test %>% select(-all_of(cor_cols))
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T)
lin_team <- train(team_score ~., data = train,
trControl = ctrl,
method = "lm")
lin_team
summary(lin_team) # Model Components
autoplot(lin_team$finalModel) # Viz
glance(lin_team$finalModel) # Entire Model
tidy(lin_team$finalModel) # Model Components
augment(lin_team$finalModel) # Observations
team_pred <- predict(lin_team, test)
rmse <- RMSE(team_pred, test$team_score)
mae <- MAE(team_pred, test$team_score)
r2 <- R2(team_pred, test$team_score)
cat("RMSE: ", rmse, "MAE: ", mae, " R2: ", r2)
# all features
train <- nba_final %>%
filter(season <= 2021) %>%
select(team_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
test <- nba_final %>%
filter(season > 2021) %>%
select(team_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T)
lin_team <- train(team_score ~., data = train,
trControl = ctrl,
method = "lm")
lin_team
summary(lin_team) # Model Components
autoplot(lin_team$finalModel) # Viz
glance(lin_team$finalModel) # Entire Model
tidy(lin_team$finalModel) # Model Components
augment(lin_team$finalModel) # Observations
team_pred <- predict(lin_team, test)
rmse <- RMSE(team_pred, test$team_score)
mae <- MAE(team_pred, test$team_score)
r2 <- R2(team_pred, test$team_score)
cat("RMSE: ", rmse, "MAE: ", mae, " R2: ", r2)
# all features
train <- nba_final %>%
filter(season <= 2021) %>%
select(team_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
test <- nba_final %>%
filter(season > 2021) %>%
select(team_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
# highly correlated features removed
train <- train %>% select(-all_of(cor_cols))
test <- test %>% select(-all_of(cor_cols))
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T)
lin_team <- train(team_score ~., data = train,
trControl = ctrl,
method = "lm")
lin_team
summary(lin_team) # Model Components
autoplot(lin_team$finalModel) # Viz - ggfortify
glance(lin_team$finalModel) # Entire Model - tidymodels
tidy(lin_team$finalModel) # Model Components - tidymodels
augment(lin_team$finalModel) # Observations - tidymodels
team_pred <- predict(lin_team, test)
rmse <- RMSE(team_pred, test$team_score)
mae <- MAE(team_pred, test$team_score)
r2 <- R2(team_pred, test$team_score)
cat("RMSE: ", rmse, "MAE: ", mae, " R2: ", r2)
# all features
train <- nba_final %>%
filter(season <= 2021) %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
test <- nba_final %>%
filter(season > 2021) %>%
select(team_winner, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
# highly correlated features removed
train <- train %>% select(-all_of(cor_cols))
test <- test %>% select(-all_of(cor_cols))
# normalize features
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
# model
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T,
classProbs = T, summaryFunction = twoClassSummary)
log_win <- train(team_winner ~., data = train,
trControl = ctrl,
method = "glm",
metric = "ROC",
family = "binomial")
log_win
log_win$resample
log_win$results
summary(log_win) # Model Components
confusionMatrix(log_win) # Confusion Matrix
glance(log_win$finalModel) # Entire Model - tidymodels
tidy(log_win$finalModel) # Model Components - tidymodels
augment(log_win$finalModel) # Observations - tidymodels
# predictions
win_pred <- predict(log_win, test, type = "prob")
confusionMatrix(test$team_winner,
factor(ifelse(win_pred[,1] > 0.5, "win", "loss"),
levels = c("win","loss")),
positive = "win")
away_pred <- as.numeric(win_pred[,1])
home_pred <- as.numeric(win_pred[,2])
obs <- test$team_winner
pred <- factor(ifelse(away_pred > 0.5, "win", "loss"), levels = c("win","loss"))
obs_pred <- data.frame(obs = obs,
pred = pred,
win = away_pred,
loss = home_pred)
# model evaluation
twoClassSummary(obs_pred, lev = levels(obs)) # ROC
prSummary(obs_pred, lev = levels(obs)) # AUC
mnLogLoss(obs_pred, lev = levels(obs)) # Log Loss
postResample(pred = test$team_winner, obs = win_pred)
postResample(pred = test$team_winner, obs = obs)
postResample(pred = pred, obs = obs)
obs_pred %>% metrics(obs, pred) # Accuracy and Kappa
obs_pred %>% roc_auc(obs, win) # AUC
# all features
train <- nba_final %>%
filter(season <= 2021) %>%
select(team_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
test <- nba_final %>%
filter(season > 2021) %>%
select(team_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
# highly correlated features removed
train <- train %>% select(-all_of(cor_cols))
test <- test %>% select(-all_of(cor_cols))
# normalize features
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
# model
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T)
lin_team <- train(team_score ~., data = train,
trControl = ctrl,
method = "lm")
lin_team
summary(lin_team) # Model Components
autoplot(lin_team$finalModel) # Viz - ggfortify
glance(lin_team$finalModel) # Entire Model - tidymodels
tidy(lin_team$finalModel) # Model Components - tidymodels
augment(lin_team$finalModel) # Observations - tidymodels
lin_team
summary(lin_team) # model components
autoplot(lin_team$finalModel) # ziz - ggfortify
glance(lin_team$finalModel) # entire model - tidymodels
tidy(lin_team$finalModel) # model components - tidymodels
augment(lin_team$finalModel) # observations - tidymodels
# predictions
team_pred <- predict(lin_team, test)
# model evaluation
rmse <- RMSE(team_pred, test$team_score)
mae <- MAE(team_pred, test$team_score)
r2 <- R2(team_pred, test$team_score)
cat("RMSE: ", rmse, "MAE: ", mae, " R2: ", r2)
postResample(pred = team_pred, obs = test$team_score) # caret
# variable importance
lin_team_imp <- rownames_to_column(varImp(lin_team)[["importance"]], "Var") %>%
arrange(desc(Overall)) %>%
head(20)
lin_team_imp
# variable importance
lin_team_imp <- rownames_to_column(varImp(lin_team, scale = F)[["importance"]],
"Var") %>%
arrange(desc(Overall)) %>%
head(20)
lin_team_imp
# all features
train <- nba_final %>%
filter(season <= 2021) %>%
select(opp_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
test <- nba_final %>%
filter(season > 2021) %>%
select(opp_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
# highly correlated features removed
train <- train %>% select(-all_of(cor_cols))
test <- test %>% select(-all_of(cor_cols))
# normalize features
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
# model
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T)
lin_opp <- train(opp_score ~., data = train,
trControl = ctrl,
method = "lm")
lin_opp
summary(lin_opp) # model components
autoplot(lin_opp$finalModel) # ziz - ggfortify
glance(lin_opp$finalModel) # entire model - tidymodels
tidy(lin_opp$finalModel) # model components - tidymodels
augment(lin_opp$finalModel) # observations - tidymodels
# predictions
opp_pred <- predict(lin_opp, test)
# model evaluation
postResample(pred = opp_pred, obs = test$opp_score) # caret eval
rmse <- RMSE(opp_pred, test$opp_score)
mae <- MAE(opp_pred, test$opp_score)
r2 <- R2(opp_pred, test$opp_score)
cat("RMSE: ", rmse, "MAE: ", mae, " R2: ", r2)
# variable importance
lin_opp_imp <- rownames_to_column(varImp(lin_opp, scale = F)[["importance"]],
"Var") %>%
arrange(desc(Overall)) %>%
head(20)
lin_opp_imp
# all features
train <- nba_final %>%
filter(season <= 2021) %>%
select(team_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
test <- nba_final %>%
filter(season > 2021) %>%
select(team_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
# highly correlated features removed
train <- train %>% select(-all_of(cor_cols))
test <- test %>% select(-all_of(cor_cols))
# normalize features
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
# model
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T)
lin_team <- train(team_score ~., data = train,
trControl = ctrl,
method = "lm")
lin_team
summary(lin_team) # model components
autoplot(lin_team$finalModel) # ziz - ggfortify
glance(lin_team$finalModel) # entire model - tidymodels
tidy(lin_team$finalModel) # model components - tidymodels
augment(lin_team$finalModel) # observations - tidymodels
# predictions
team_pred <- predict(lin_team, test)
# model evaluation
postResample(pred = team_pred, obs = test$team_score) # caret eval
rmse <- RMSE(team_pred, test$team_score)
mae <- MAE(team_pred, test$team_score)
r2 <- R2(team_pred, test$team_score)
cat("RMSE: ", rmse, "MAE: ", mae, " R2: ", r2)
# variable importance
importance <- varImp(lin_team, scale = F)
print(importance)
plot(importance)
# all features
train <- nba_final %>%
filter(season <= 2021) %>%
select(opp_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
test <- nba_final %>%
filter(season > 2021) %>%
select(opp_score, away_implied_prob,
b2b_first:opp_b2b_second,
away_fg2m:away_fg3_pct,
away_fgm:away_opp_fg3_pct,
away_opp_fgm:away_opp_ftr,
away_opp_ast:away_pace,
home_fg2m:home_fg3_pct,
home_fgm:home_opp_fg3_pct,
home_opp_fgm:home_opp_ftr,
home_opp_ast:home_pace)
# highly correlated features removed
train <- train %>% select(-all_of(cor_cols))
test <- test %>% select(-all_of(cor_cols))
# normalize features
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
# model
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T)
lin_opp <- train(opp_score ~., data = train,
trControl = ctrl,
method = "lm")
lin_opp
summary(lin_opp) # model components
autoplot(lin_opp$finalModel) # viz - ggfortify
glance(lin_opp$finalModel) # entire model - tidymodels
tidy(lin_opp$finalModel) # model components - tidymodels
augment(lin_opp$finalModel) # observations - tidymodels
# predictions
opp_pred <- predict(lin_opp, test)
# model evaluation
postResample(pred = opp_pred, obs = test$opp_score) # caret eval
rmse <- RMSE(opp_pred, test$opp_score)
mae <- MAE(opp_pred, test$opp_score)
r2 <- R2(opp_pred, test$opp_score)
cat("RMSE: ", rmse, "MAE: ", mae, " R2: ", r2)
# variable importance
importance <- varImp(lin_opp, scale = F)
print(importance)
plot(importance)
